#!/bin/bash

info() {
  echo "info: $1" | tee -a /tmp/run.bis
}

error() {
  echo "error: $1" | tee -a /tmp/run.bis
}

run() {
  eval "$1" >> /tmp/run.bis 2>&1
}

rm -f /tmp/run.bis


if [[ -z $1 ]] && [[ -f BISECT ]]; then
  BISECT=$(cat BISECT)
  if [[ -z "$BISECT" ]]; then
    error "empty BISECT file"
    exit
  fi

  BAD_COMMIT=$(echo "$BISECT" | awk '{ print $1 }')
  GOOD_COMMIT=$(echo "$BISECT" | awk '{ print $2 }')
  CMD=$(cut -d' ' -f4- BISECT)
elif [[ -n $4 ]]; then
  BAD_COMMIT=$1
  GOOD_COMMIT=$2
  shift
  shift
  shift
  CMD="$@"
else
  error "usage: $0 <bad_commit> <good_commit> -- <poc_cmd>"
  error "usage: (no argument - read argument through the BISECT file)"
  exit
fi

if [[ -z "$CMD" ]]; then
  error "no command"
  exit
fi

info "'$BAD_COMMIT' to '$GOOD_COMMIT'..."
info "poc command: $CMD"


# Initial ASAN dump

info "generating the most recent ASAN dump..."


git checkout $BAD_COMMIT --force

if [[ $? != 0 ]]; then
  error "cannot checkout the bad commit."
  exit
fi


if [[ -f 'autogen.sh' ]]; then
  run "./autogen.sh"
elif [[ -f 'configure.ac' ]]; then
  run "autoreconf -vfi"
elif [[ ! -f 'configure' ]]; then
  error "how do I configure?"
  exit
fi


ASAN_FLAGS="-fsanitize=address -g"

run "./configure CFLAGS=\"$ASAN_FLAGS\" CXXFLAGS=\"$ASAN_FLAGS\" \
  LDFLAGS=\"$ASAN_FLAGS\""

if [[ $? != 0 ]]; then
  error "configure failed?"
  exit
elif [[ ! -f 'Makefile' ]]; then
  error "no Makefile detected."
  exit
fi


run "make -j"

if [[ $? != 0 ]]; then
  error "make failed."
  exit
fi


INIT_DUMP="/tmp/init_dump.bis"

eval "$CMD > $INIT_DUMP 2>&1"

if [[ -z "grep AddressSanitizer $INIT_DUMP" ]]; then
  error "bad commit ($BAD_COMMIT) is not bad."
  exit
fi


# Extract: bug type, crashing function name

while read LINE; do
  if [[ -n $(echo $LINE | grep AddressSanitizer) ]]; then
    BUG_TYPE=

    if [[ $(echo $LINE | grep SEGV) ]]; then
      BUG_TYPE=SEGV
    elif [[ $(echo $LINE | grep SIGFPE) ]]; then
      BUG_TYPE=SIGFPE
    else
      for WORD in $LINE; do
        if [[ $_ON_DET == "1" ]]; then
          BUG_TYPE=$WORD
          break
        elif [[ $WORD == "on" ]]; then
          _ON_DET=1
        fi
      done
    fi

    if [[ -z "$BUG_TYPE" ]]; then
      error "no bug type detected."
      exit
    fi

    _BT_DET=1
  elif [[ $_BT_DET == "1" ]]; then
    HEAD=$(echo $LINE | awk '{ print $1 }')
    if [[ ${HEAD:0:1} == '#' ]]; then
      if [[ -z $(echo $LINE | grep 'asan') ]] && \
        [[ -z $(echo $LINE | grep 'sanitizer') ]]; then
        CRASH_FUNC=$(echo $LINE | awk '{ print $4 }')
        break
      fi
    fi
  fi
done < $INIT_DUMP

if [[ -z "$BUG_TYPE" ]] || [[ -z "$CRASH_FUNC" ]]; then
  error "bug_type or crash_func not found."
  exit
fi


info "bug_type: $BUG_TYPE"
info "crash_func: $CRASH_FUNC"

git reset --hard


# Begin bisect

git bisect start $BAD_COMMIT $GOOD_COMMIT

while true; do
  if [[ -n $(git bisect log | tail -1 | grep success) ]]; then
    break
  fi

  info "commit: $(git rev-parse HEAD)"
  info "reconfiguring..."

  if [[ -f 'autogen.sh' ]]; then
    run "./autogen.sh"
  elif [[ -f 'configure.ac' ]]; then
    run "autoreconf -vfi"
  elif [[ ! -f 'configure' ]]; then
    error "how do I configure?"
    git reset --hard > /dev/null 2>&1
    git bisect skip
  fi

  info "configuring..."

  run "./configure CFLAGS=\"-fsanitize=address -g\" \
    CXXFLAGS=\"-fsanitize=address -g\" \
    LDFLAGS=\"-fsanitize=address -g\""

  if [[ $? != 0 ]]; then
    error "configure failed?"
    git reset --hard > /dev/null 2>&1
    git bisect skip
    continue
  elif [[ ! -f 'Makefile' ]]; then
    error "no Makefile detected."
    git reset --hard > /dev/null 2>&1
    git bisect skip
    continue
  fi

  info "building..."

  run "make -j"

  if [[ $? != 0 ]]; then
    error "make failed."
    git reset --hard > /dev/null 2>&1
    git bisect skip
    continue
  fi

  info "running..."

  $CMD > /tmp/bisect_dump.bis 2>&1

  if [[ -n $(grep $BUG_TYPE /tmp/bisect_dump.bis) ]] && \
    [[ -n $(grep $CRASH_FUNC /tmp/bisect_dump.bis) ]]; then
    info "bad"
    CODE=1
  else
    info "gud"
    CODE=0
  fi

  git reset --hard > /dev/null 2>&1

  if [[ $CODE == 0 ]]; then
    git bisect good
  else
    git bisect bad
  fi
done


git bisect reset bisect/bad 
