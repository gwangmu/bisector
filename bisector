#!/bin/bash

RUN_LOG="/tmp/run.bis"
DUMP_FILE="/tmp/bisect_dump.bis"


# Debug functions

actn() {
  printf "[*] $1" | tee -a $RUN_LOG
}

act() {
  echo "[*] $1" | tee -a $RUN_LOG
}

info() {
  echo " +  $1" | tee -a $RUN_LOG
}

error() {
  echo "[-] error: $1" | tee -a $RUN_LOG
}

run() {
  eval "$1" >> $RUN_LOG 2>&1
}


# Test functions

do_test() {
  SKIPPED=0
  TESTCODE=-1

  _CUR_COMMIT=$(git rev-parse HEAD)
  actn "Testing commit '${_CUR_COMMIT:0:8}'... "

  if [[ -z $(git bisect log 2>&1 | grep "not bisecting") ]]; then
    _REM_COMMIT=$(git bisect visualize --oneline | wc -l)
    printf "($_REM_COMMIT remaining) "
  fi

  # Reconfigure
  printf "(1/4: Reconfigure)"

  if [[ -f 'autogen.sh' ]]; then
    run "./autogen.sh"
  elif [[ -f 'configure.ac' ]]; then
    run "autoreconf -vfi"
  elif [[ ! -f 'configure' ]]; then
    for i in {1..18}; do printf "\b"; done
    printf "Unconfigurable    \n"
    git reset --hard > /dev/null 2>&1
    git bisect skip > /dev/null 2>&1
    SKIPPED=1
    return
  fi

  # Configure
  for i in {1..18}; do printf "\b"; done
  printf "(2/4: Configure)  "

  run "./configure CFLAGS=\"-fsanitize=address -g\" \
    CXXFLAGS=\"-fsanitize=address -g\" \
    LDFLAGS=\"-fsanitize=address -g\""

  if [[ $? != 0 ]]; then
    for i in {1..18}; do printf "\b"; done
    printf "Skipped           \n"
    git reset --hard > /dev/null 2>&1
    git bisect skip > /dev/null 2>&1
    SKIPPED=1
    return
  elif [[ ! -f 'Makefile' ]]; then
    for i in {1..18}; do printf "\b"; done
    printf "Skipped           \n"
    git reset --hard > /dev/null 2>&1
    git bisect skip > /dev/null 2>&1
    SKIPPED=1
    return
  fi

  # Build
  for i in {1..18}; do printf "\b"; done
  printf "(3/4: Build)      "

  run "make -j"

  if [[ $? != 0 ]]; then
    for i in {1..18}; do printf "\b"; done
    printf "Skipped           \n"
    git reset --hard > /dev/null 2>&1
    git bisect skip > /dev/null 2>&1
    SKIPPED=1
    return
  fi

  # Run
  for i in {1..18}; do printf "\b"; done
  printf "(4/4: Run)        "

  cp $POC .poc.input
  $CMD > $DUMP_FILE 2>&1

  for i in {1..18}; do printf "\b"; done

  if [[ -n $BUG_TYPE ]] && [[ -n $CRASH_FUNC ]]; then
    if [[ -n $(grep $BUG_TYPE $DUMP_FILE) ]] && \
      [[ -n $(grep $CRASH_FUNC $DUMP_FILE) ]]; then
      printf "Bad               "
      TESTCODE=1
    else
      printf "Good              "
      TESTCODE=0
    fi
  else
    printf "                  "
  fi

  printf "\n"
}


# Auxiliary functions

cleanup_log() {
  rm -f $RUN_LOG $DUMP_FILE
}

cleanup_bisect() {
  rm -f bad.bis good.bis run.bis FIRSTBAD
}


# Initialize

act "Initializing..."

cleanup_log

if [[ -z $1 ]] && [[ -f BISECT ]]; then
  BISECT=$(cat BISECT)
  if [[ -z "$BISECT" ]]; then
    error "empty BISECT file"
    exit
  fi

  BAD_COMMIT=$(echo "$BISECT" | awk '{ print $1 }')
  GOOD_COMMIT=$(echo "$BISECT" | awk '{ print $2 }')
  POC=$(echo "$BISECT" | awk '{ print $3 }')
  CMD=$(cat BISECT | tail -1 | cut -d' ' -f5-)
else
  error "usage: $0"
  error "usage: (read argument through the BISECT file)"
  exit
fi

if [[ -z "$CMD" ]]; then
  error "no command"
  exit
fi


info "Commit range: '$BAD_COMMIT'(bad) to '$GOOD_COMMIT'(good)"
info "PoC input: $POC"
info "PoC command: $CMD"


CMD=$(echo "$CMD" | sed 's/@@/.poc.input/g')


# Initial ASAN dump

act "Generating most recent ASAN dump..."

git reset --hard > /dev/null 2>&1
git bisect reset > /dev/null 2>&1
git checkout $BAD_COMMIT --force > /dev/null 2>&1

if [[ $? != 0 ]]; then
  error "cannot checkout '$BAD_COMMIT'(bad)."
  exit
fi


do_test

if [[ -z "grep AddressSanitizer $DUMP_FILE" ]] && \
  [[ -z "grep Assertion $DUMP_FILE" ]]; then
  error "'$BAD_COMMIT' is not actually bad."
  exit
fi


# Extract: bug type, crashing function name

while read LINE; do
  if [[ -n $(echo $LINE | grep Assertion) ]]; then
    BUG_TYPE=Assertion

    for WORD in $LINE; do
      if [[ $WORD == "Assertion" ]]; then
        break
      else
        CRASH_FUNC=${WORD%:}
      fi
    done
  elif [[ -n $(echo $LINE | grep AddressSanitizer) ]]; then
    BUG_TYPE=

    if [[ $(echo $LINE | grep SEGV) ]]; then
      BUG_TYPE=SEGV
    elif [[ $(echo $LINE | grep SIGFPE) ]]; then
      BUG_TYPE=SIGFPE
    else
      for WORD in $LINE; do
        if [[ $WORD == "on" ]]; then
          break
        else
          BUG_TYPE=$WORD
        fi
      done
    fi

    if [[ -z "$BUG_TYPE" ]]; then
      error "no bug type detected."
      exit
    fi

    _BT_DET=1
  elif [[ $_BT_DET == "1" ]]; then
    HEAD=$(echo $LINE | awk '{ print $1 }')
    if [[ ${HEAD:0:1} == '#' ]]; then
      if [[ -z $(echo $LINE | grep 'asan') ]] && \
        [[ -z $(echo $LINE | grep 'sanitizer') ]] && \
        [[ -z $(echo $LINE | grep 'libc') ]]; then
        CRASH_FUNC=$(echo $LINE | awk '{ print $4 }')
        break
      fi
    fi
  fi
done < $DUMP_FILE 

info "Bug type: $BUG_TYPE"
info "Crash function: $CRASH_FUNC"

if [[ -z "$BUG_TYPE" ]] || [[ -z "$CRASH_FUNC" ]]; then
  error "bug type or crash function is not found."
  exit
fi


# Verify good commit

act "Verifying good commit..."

git reset --hard > /dev/null 2>&1
git bisect reset > /dev/null 2>&1
git checkout $GOOD_COMMIT --force > /dev/null 2>&1

if [[ $? != 0 ]]; then
  error "cannot checkout '$GOOD_COMMIT'(good)."
  exit
fi

do_test

if [[ $TESTCODE == 1 ]]; then
  error "'$GOOD_COMMIT' is not actually good."
  exit
fi


# Do bisect

act "Bisecting..."

git reset --hard > /dev/null 2>&1
git checkout origin/master --force > /dev/null 2>&1
git bisect start $BAD_COMMIT $GOOD_COMMIT > /dev/null 2>&1

while [[ -z $(git bisect log | tail -1 | grep "first bad commit") ]]; do
  do_test
  if [[ $SKIPPED == 1 ]]; then continue; fi

  git reset --hard > /dev/null 2>&1

  if [[ $TESTCODE == 0 ]]; then
    git bisect good > /dev/null 2>&1
  elif [[ $TESTCODE == 1 ]]; then
    git bisect bad > /dev/null 2>&1
  else
    error "internal: obscure TESTCODE '$TESTCODE'."
    exit
  fi
done


git bisect reset bisect/bad > /dev/null 2>&1


# Verification

act "Verifying..."

git reset --hard > /dev/null 2>&1
do_test
cp $DUMP_FILE bad.bis
echo $(git rev-parse HEAD) >> bad.bis

if [[ $TESTCODE != 1 ]]; then
  cleanup_bisect
  error "cannot find a bad commit."
  exit
fi

git reset --hard > /dev/null 2>&1
git checkout HEAD~ > /dev/null 2>&1
do_test
cp $DUMP_FILE good.bis
echo $(git rev-parse HEAD) >> good.bis

if [[ $TESTCODE != 0 ]]; then
  cleanup_bisect
  error "not the first bad commit. maybe '$GOOD_COMMIT' is not actually good."
  exit
fi

mv $RUN_LOG run.bis 


git reset --hard > /dev/null 2>&1
git checkout HEAD@{1} > /dev/null 2>&1

echo $(git rev-parse HEAD) > FIRSTBAD


info "First bad commit: $(git rev-parse HEAD) (see FIRSTBAD)"
info "{Last-good, First-bad} ASAN log: {good, bad}.bis"
info "All done!"
